generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  handle       String   @unique
  displayName  String?
  firstName    String?
  lastName     String?
  createdAt    DateTime @default(now())
  role         String   @default("user")
  presenceMode String   @default("METRO") // OFF | METRO | VENUE
  
  // Subscription fields
  isPro        Boolean  @default(false)
  subscriptionTier String? // 'monthly' | 'yearly' | null
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  subscriptionId    String? // For payment processor

  cars             Car[]
  attends          Attendance[]
  createdRaces     Race[]
  raceParticipants RaceParticipant[]
  raceSessions     RaceSession[]
  raceResults      RaceResult[]
}

model Car {
  id               String    @id @default(cuid())
  userId           String
  name             String
  make             String?
  model            String?
  year             Int?
  color            String?
  class            String?
  owned            Boolean   @default(false)
  estimatedValue   Float?
  imageUrl         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Physical specs
  weightKg         Int?      // Weight in kg
  whp              Int?      // Wheel horsepower
  drivetrain       String?   // RWD, FWD, AWD
  
  // AI Performance Analysis
  basePower        Float?    // Stock horsepower
  baseTorque       Float?    // Stock torque
  baseWeight       Float?    // Stock weight
  currentPower     Float?    // Current horsepower after mods
  currentTorque    Float?    // Current torque after mods
  currentWeight    Float?    // Current weight after mods
  performanceScore Float?    // AI-calculated overall performance score
  aiAnalysisDate   DateTime? // Last AI analysis update
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  modifications    Modification[]
  raceResults      RaceResult[]
  raceParticipants RaceParticipant[]
  raceSessions     RaceSession[]
  attendances      Attendance[]
}

model Modification {
  id       String  @id @default(cuid())
  carId    String
  category String
  name     String
  brand    String?
  notes    String?
  
  // AI Enhancement Data
  powerGain       Float?    // HP gain from this mod
  torqueGain      Float?    // Torque gain from this mod
  weightChange    Float?    // Weight change (negative = lighter)
  reliabilityImpact Float? // AI-predicted reliability impact (0-1)
  compatibilityScore Float? // AI-calculated compatibility with other mods
  performanceGain Float?    // Overall performance improvement percentage
  aiConfidence    Float?    // AI prediction confidence (0-1)
  
  // Web Scraped Data
  marketPrice     Float?    // Current market price
  availability    String?   // In stock, backorder, discontinued
  vendorUrl       String?   // Where to buy
  reviews         Json?     // Scraped review data
  lastPriceUpdate DateTime? // Last price scraping update
  
  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  type        String   // DragStrip | Circuit | Autocross | RollRacing
  city        String?
  region      String?
  country     String?  @default("USA")
  polygonJson Json     // GeoJSON Polygon
  websiteUrl  String?
  
  events Event[]
}

model Event {
  id        String   @id @default(cuid())
  venueId   String
  name      String
  type      String
  startAt   DateTime
  endAt     DateTime
  status    String   @default("Scheduled")

  venue Venue @relation(fields: [venueId], references: [id], onDelete: Cascade)
  attendees Attendance[]
}

model Attendance {
  id            String   @id @default(cuid())
  eventId       String
  userId        String
  carId         String?
  checkedInAt   DateTime?
  verifiedInVenue Boolean @default(false)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  car   Car?  @relation(fields: [carId], references: [id], onDelete: SetNull)
}

model Race {
  id              String   @id @default(cuid())
  createdById     String
  name            String?
  raceType        String   // drag | circuit | street | track
  status          String   @default("pending") // pending | starting | active | completed | cancelled
  maxParticipants Int      @default(8)
  startTime       DateTime
  endTime         DateTime?
  distance        Float?   // in miles
  entryFee        Float?
  prizePayout     Float?
  locationName    String?
  locationAddress String?
  locationLat     Float?
  locationLon     Float?
  rules           Json?    // Store race rules as JSON
  weather         Json?    // Store weather conditions as JSON
  trackConditions Json?    // Store track conditions as JSON
  safetyFeatures  Json?    // Store safety features as JSON
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy    User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants RaceParticipant[]
  sessions     RaceSession[]
  results      RaceResult[]
}

model RaceResult {
  id           String  @id @default(cuid())
  raceId       String
  participantId String  // Racer ID
  carId        String?
  position     Int?    // Final position (1st, 2nd, etc.)
  timeSeconds  Float?  // Race time in seconds
  topSpeed     Float?  // Top speed achieved
  lapTimes     Json?   // Array of lap times
  
  // AI Performance Analysis
  performanceScore  Float?  // AI-calculated performance rating
  accelerationScore Float?  // 0-60, quarter mile analysis
  handlingScore     Float?  // Cornering analysis
  consistencyScore  Float?  // Lap time consistency
  skillRating       Float?  // AI-estimated driver skill
  carPotential      Float?  // How much car potential was utilized
  
  // Detailed Telemetry
  telemetryData     Json?   // Comprehensive race data
  weatherConditions String? // Weather during race
  trackCondition    String? // Track surface conditions
  
  race Race @relation(fields: [raceId], references: [id], onDelete: Cascade)
  racer User @relation("RaceResults", fields: [participantId], references: [id], onDelete: Cascade)
  car Car? @relation(fields: [carId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([raceId, participantId])
}

model RaceSession {
  id              String   @id @default(cuid())
  raceId          String?  // Optional - can be standalone session
  userId          String
  carId           String?
  startTime       DateTime
  endTime         DateTime?
  isCompleted     Boolean  @default(false)
  sessionType     String   @default("practice") // practice | qualifying | race
  totalDistance   Float?   // in miles
  maxSpeed        Float?   // in mph
  averageSpeed    Float?   // in mph
  
  // AI Performance Analysis
  performanceScore Float?  // AI-calculated session performance
  drivingStyle     String? // AI-analyzed driving style (aggressive, smooth, etc.)
  improvementTips  Json?   // AI-generated improvement suggestions
  
  race            Race?    @relation(fields: [raceId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  car             Car?     @relation(fields: [carId], references: [id], onDelete: SetNull)
  results         RaceResult[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RaceResult {
  id            String    @id @default(cuid())
  raceId        String?   // Optional - can be session result
  sessionId     String?   // Optional - link to session
  participantId String
  carId         String?
  position      Int       // 1st, 2nd, 3rd, etc.
  timeElapsed   Float?    // Race completion time in seconds
  topSpeed      Float?    // Maximum speed achieved
  avgSpeed      Float?    // Average speed during race
  distance      Float?    // Distance covered
  isWinner      Boolean   @default(false)
  
  // AI Performance Analysis  
  reactionTime    Float?  // Start reaction time
  consistencyScore Float? // AI-calculated consistency rating
  skillRating     Float?  // AI-determined skill level for this result
  performanceVsExpected Float? // How did actual performance compare to AI prediction
  
  race          Race?       @relation(fields: [raceId], references: [id], onDelete: Cascade)
  session       RaceSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant   User        @relation(fields: [participantId], references: [id], onDelete: Cascade)
  car           Car?        @relation(fields: [carId], references: [id], onDelete: SetNull)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
  zeroToSixty     Float?   // in seconds
  quarterMile     Float?   // in seconds
  halfMile        Float?   // in seconds
  lapTimes        Json?    // Store lap times as JSON array
  gForces         Json?    // Store g-force data as JSON
  createdAt       DateTime @default(now())

  race      Race?      @relation(fields: [raceId], references: [id], onDelete: SetNull)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  car       Car?       @relation(fields: [carId], references: [id], onDelete: SetNull)
  gpsPoints GPSPoint[]
}

model GPSPoint {
  id            String   @id @default(cuid())
  sessionId     String
  latitude      Float
  longitude     Float
  altitude      Float?
  timestamp     DateTime
  accuracy      Float?
  speed         Float?   // in mph
  heading       Float?   // in degrees
  sequenceIndex Int      // Order in the route

  session RaceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, sequenceIndex])
}
