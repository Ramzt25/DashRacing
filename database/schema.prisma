generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  handle       String   @unique
  displayName  String?
  firstName    String?
  lastName     String?
  role         String   @default("user")
  presenceMode String   @default("METRO") // OFF | METRO | VENUE
  
  // Subscription fields
  isPro        Boolean  @default(false)
  subscriptionTier String? // 'monthly' | 'yearly' | null
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  subscriptionId    String? // For payment processor

  // Relationships
  cars             Car[]
  attendances      Attendance[]
  createdRaces     Race[]
  raceParticipants RaceParticipant[]
  raceSessions     RaceSession[]
  raceResults      RaceResult[] @relation("RaceResults")
  follows          Follow[] @relation("Follower")
  followers        Follow[] @relation("Following")
  posts            Post[]
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Car {
  id               String    @id @default(cuid())
  userId           String
  name             String
  make             String?
  model            String?
  year             Int?
  trim             String?   // Engine/trim variant (GT, Premium, Base, etc.)
  color            String?
  class            String?
  owned            Boolean   @default(false)
  estimatedValue   Float?
  imageUrl         String?
  
  // Physical specs
  weightKg         Int?      // Weight in kg
  whp              Int?      // Wheel horsepower
  drivetrain       String?   // RWD, FWD, AWD
  
  // AI Performance Analysis
  basePower        Float?    // Stock horsepower
  baseTorque       Float?    // Stock torque
  baseWeight       Float?    // Stock weight
  currentPower     Float?    // Current horsepower after mods
  currentTorque    Float?    // Current torque after mods
  currentWeight    Float?    // Current weight after mods
  performanceScore Float?    // AI-calculated overall performance score
  aiAnalysisDate   DateTime? // Last AI analysis update
  
  // Vehicle Database Reference
  vehicleDataId    String?   // Reference to VehicleDatabase entry
  vehicleData      VehicleDatabase? @relation(fields: [vehicleDataId], references: [id])
  
  // Relationships
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  modifications    Modification[]
  raceResults      RaceResult[]
  raceParticipants RaceParticipant[]
  raceSessions     RaceSession[]
  attendances      Attendance[]
  dynoResults      DynoResult[]  // Dyno results for this car
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Modification {
  id       String  @id @default(cuid())
  carId    String
  category String
  name     String
  brand    String?
  notes    String?
  
  // AI Enhancement Data
  powerGain       Float?    // HP gain from this mod
  torqueGain      Float?    // Torque gain from this mod
  weightChange    Float?    // Weight change (negative = lighter)
  reliabilityImpact Float? // AI-predicted reliability impact (0-1)
  compatibilityScore Float? // AI-calculated compatibility with other mods
  performanceGain Float?    // Overall performance improvement percentage
  aiConfidence    Float?    // AI prediction confidence (0-1)
  
  // Web Scraped Data
  marketPrice     Float?    // Current market price
  availability    String?   // In stock, backorder, discontinued
  vendorUrl       String?   // Where to buy
  reviews         Json?     // Scraped review data
  lastPriceUpdate DateTime? // Last price scraping update
  
  // Learning System Links
  modDatabaseId   String?   // Link to ModificationDatabase entry
  predictedGains  Json?     // Original AI predictions for comparison
  
  // Relationships
  car             Car       @relation(fields: [carId], references: [id], onDelete: Cascade)
  modDatabase     ModificationDatabase? @relation(fields: [modDatabaseId], references: [id])
  dynoResults     DynoResult[] // Real-world results for this specific installation
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Race {
  id              String   @id @default(cuid())
  createdById     String
  name            String?
  raceType        String   // drag | circuit | street | track
  status          String   @default("pending") // pending | starting | active | completed | cancelled
  maxParticipants Int      @default(8)
  startTime       DateTime
  endTime         DateTime?
  distance        Float?   // in miles
  entryFee        Float?
  prizePayout     Float?
  locationName    String?
  locationAddress String?
  locationLat     Float?
  locationLon     Float?
  rules           Json?    // Store race rules as JSON
  weather         Json?    // Store weather conditions as JSON
  trackConditions Json?    // Store track conditions as JSON
  safetyFeatures  Json?    // Store safety features as JSON

  createdBy    User              @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants RaceParticipant[]
  sessions     RaceSession[]
  results      RaceResult[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RaceParticipant {
  id       String @id @default(cuid())
  raceId   String
  racerId  String
  carId    String?
  position Int?
  time     Float?
  
  race Race @relation(fields: [raceId], references: [id], onDelete: Cascade)
  racer User @relation(fields: [racerId], references: [id], onDelete: Cascade)
  car Car? @relation(fields: [carId], references: [id], onDelete: SetNull)
  
  @@unique([raceId, racerId])
}

model RaceResult {
  id           String  @id @default(cuid())
  raceId       String
  participantId String  // Racer ID
  carId        String?
  position     Int?    // Final position (1st, 2nd, etc.)
  timeSeconds  Float?  // Race time in seconds
  topSpeed     Float?  // Top speed achieved
  lapTimes     Json?   // Array of lap times
  
  // AI Performance Analysis
  performanceScore  Float?  // AI-calculated performance rating
  accelerationScore Float?  // 0-60, quarter mile analysis
  handlingScore     Float?  // Cornering analysis
  consistencyScore  Float?  // Lap time consistency
  skillRating       Float?  // AI-estimated driver skill
  carPotential      Float?  // How much car potential was utilized
  
  // Detailed Telemetry
  telemetryData     Json?   // Comprehensive race data
  weatherConditions String? // Weather during race
  trackCondition    String? // Track surface conditions
  
  race Race @relation(fields: [raceId], references: [id], onDelete: Cascade)
  racer User @relation("RaceResults", fields: [participantId], references: [id], onDelete: Cascade)
  car Car? @relation(fields: [carId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([raceId, participantId])
}

model RaceSession {
  id              String   @id @default(cuid())
  raceId          String?  // Optional - can be standalone session
  userId          String
  carId           String?
  startTime       DateTime
  endTime         DateTime?
  isCompleted     Boolean  @default(false)
  sessionType     String   @default("practice") // practice | qualifying | race
  totalDistance   Float?   // in miles
  maxSpeed        Float?   // in mph
  averageSpeed    Float?   // in mph
  zeroToSixty     Float?   // in seconds
  quarterMile     Float?   // in seconds
  halfMile        Float?   // in seconds
  lapTimes        Json?    // Store lap times as JSON array
  gForces         Json?    // Store g-force data as JSON
  
  // AI Performance Analysis
  performanceScore Float?  // AI-calculated session performance
  drivingStyle     String? // AI-analyzed driving style (aggressive, smooth, etc.)
  improvementTips  Json?   // AI-generated improvement suggestions
  
  race            Race?    @relation(fields: [raceId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  car             Car?     @relation(fields: [carId], references: [id], onDelete: SetNull)
  gpsPoints       GPSPoint[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model GPSPoint {
  id            String   @id @default(cuid())
  sessionId     String
  latitude      Float
  longitude     Float
  altitude      Float?
  timestamp     DateTime
  accuracy      Float?
  speed         Float?   // in mph
  heading       Float?   // in degrees
  sequenceIndex Int      // Order in the route

  session RaceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, sequenceIndex])
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  eventType   String   // meetup | race | show | cruise
  startTime   DateTime
  endTime     DateTime?
  locationName String?
  locationAddress String?
  locationLat Float?
  locationLon Float?
  maxAttendees Int?
  entryFee    Float?
  requirements Json?   // Store requirements as JSON
  tags        String? // Store tags as JSON string
  imageUrl    String?
  isPublic    Boolean  @default(true)
  status      String   @default("upcoming") // upcoming | active | completed | cancelled
  
  attendances Attendance[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id      String @id @default(cuid())
  eventId String
  userId  String
  carId   String?
  status  String @default("going") // going | maybe | not_going
  notes   String?

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  car   Car?  @relation(fields: [carId], references: [id], onDelete: SetNull)

  @@unique([eventId, userId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  imageUrls String? // Store multiple image URLs as JSON string
  tags      String? // Store hashtags as JSON string
  likes     Int      @default(0)
  shares    Int      @default(0)
  isPublic  Boolean  @default(true)

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Generative Vehicle Database - Our growing AI-powered knowledge base
model VehicleDatabase {
  id                String   @id @default(cuid())
  
  // Vehicle Identification (Composite Key)
  year              Int
  make              String
  model             String
  trim              String?
  generation        String?   // e.g., "F80", "E46", "S550"
  
  // Vehicle Classification
  category          String?   // Sports Car, Sedan, SUV, etc.
  bodyStyle         String?   // Coupe, Sedan, Hatchback, etc.
  vehicleClass      String?   // Compact, Mid-size, Full-size, etc.
  segment           String?   // Entry-level, Luxury, Performance, etc.
  
  // Engine Specifications
  engineDisplacement Float?   // Displacement in liters
  engineConfiguration String? // V8, I4, H6, etc.
  aspiration        String?   // Naturally Aspirated, Turbocharged, Supercharged
  fuelType          String?   // Gasoline, Diesel, Hybrid, Electric
  
  // Performance Data
  horsepower        Int?      // HP at crank
  horsepowerWheel   Int?      // HP at wheels (if available)
  torque            Int?      // lb-ft
  acceleration0to60 Float?    // 0-60 mph time in seconds
  quarterMile       Float?    // Quarter mile time in seconds
  topSpeed          Int?      // Top speed in mph
  powerToWeight     Float?    // HP per pound ratio
  
  // Physical Specifications
  weight            Int?      // Weight in pounds
  weightKg          Int?      // Weight in kg
  length            Float?    // Length in inches
  width             Float?    // Width in inches  
  height            Float?    // Height in inches
  wheelbase         Float?    // Wheelbase in inches
  
  // Drivetrain
  drivetrain        String?   // RWD, FWD, AWD
  transmission      String?   // Manual, Automatic, CVT, etc.
  gears             Int?      // Number of gears
  
  // Market Data
  originalMSRP      Int?      // Original MSRP when new
  currentMarketValue Int?     // Current estimated market value
  productionYears   String?   // Production span e.g., "2015-2023"
  productionNumbers Int?      // Total units produced
  
  // AI-Generated Insights
  aiInsights        Json?     // Array of AI-generated insights
  commonModifications Json?   // Array of popular modifications
  reliabilityScore  Float?    // AI-predicted reliability (0-1)
  performanceScore  Float?    // AI-calculated performance score
  valueScore        Float?    // AI-calculated value proposition score
  
  // Data Quality & Metadata
  dataSource        String    @default("AI-Generated") // AI-Generated, User-Submitted, Manual
  confidence        Float     @default(0.8) // AI confidence in the data (0-1)
  aiModel           String?   // Which AI model generated this data
  generatedBy       String?   // User ID who triggered the generation
  verifiedBy        String?   // User ID who verified the data
  isVerified        Boolean   @default(false) // Has this data been human-verified?
  verificationDate  DateTime? // When was this verified?
  
  // Usage Statistics
  lookupCount       Int       @default(1) // How many times this vehicle was looked up
  lastUsed          DateTime  @default(now()) // Last time this data was used
  popularityScore   Float     @default(0) // Calculated popularity based on usage
  
  // Relationships
  cars              Car[]     // Cars that reference this vehicle data
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Composite index for fast vehicle lookups
  @@unique([year, make, model, trim])
  @@index([make, model])
  @@index([category, bodyStyle])
  @@index([year, make])
  @@index([popularityScore])
  @@index([lookupCount])
  @@index([dataSource, isVerified])
}

// Modification Learning Database - Learns from real-world results
model ModificationDatabase {
  id                String   @id @default(cuid())
  
  // Modification Identification
  name              String   // e.g., "Cold Air Intake", "Turbo Kit"
  category          String   // Engine, Exhaust, Intake, Turbo, etc.
  brand             String?  // Garrett, K&N, etc.
  partNumber        String?  // Specific part number
  
  // Vehicle Compatibility
  compatibleWith    Json     // Array of compatible vehicles {year, make, model, trim}
  restrictedTo      Json?    // Specific restrictions or requirements
  
  // AI Predictions vs Real Results
  predictedPowerGain    Float?   // AI's original prediction
  actualPowerGain       Float?   // Average from real dyno results
  predictedTorqueGain   Float?   // AI's original prediction  
  actualTorqueGain      Float?   // Average from real dyno results
  predictedCost         Float?   // AI's predicted cost
  actualCost            Float?   // Average from real purchases
  
  // Learning Statistics
  totalInstalls         Int      @default(0)  // How many times installed
  dynoResultCount       Int      @default(0)  // How many dyno confirmations
  accuracy              Float?   // Prediction accuracy (0-1)
  confidenceLevel       Float    @default(0.5) // How confident we are
  
  // Performance Metrics
  reliabilityScore      Float?   // Based on user feedback
  popularityScore       Float    @default(0)   // How popular this mod is
  valueScore            Float?   // Performance per dollar
  
  // Installation Data
  avgInstallTime        Float?   // Average installation time in hours
  difficultyRating      Float?   // Average difficulty (1-10)
  toolsRequired         Json?    // Common tools needed
  
  // Market Data
  priceHistory          Json?    // Price tracking over time
  availability          String?  // In Stock, Backorder, Discontinued
  
  // Learning System Metadata
  lastLearningUpdate    DateTime? // Last time we updated from real data
  dataSource            String   @default("AI-Generated") // AI-Generated, User-Verified, Dyno-Confirmed
  aiModel               String?  // Which AI model made predictions
  
  // Relationships
  modifications         Modification[] // Individual installations
  dynoResults           DynoResult[]   // Real-world performance results
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Indexes for fast lookups
  @@index([category, brand])
  @@index([popularityScore])
  @@index([accuracy])
  @@index([totalInstalls])
  @@index([confidenceLevel])
}

// Real-world dyno results that teach our AI
model DynoResult {
  id                    String   @id @default(cuid())
  
  // Link to car and modification
  carId                 String
  modificationId        String?  // Optional - can be standalone dyno
  modDatabaseId         String?  // Link to ModificationDatabase entry
  
  // Dyno Session Info
  dynoType              String?  // Dynojet, Mustang, etc.
  dynoShop              String?  // Shop name/location
  operator              String?  // Dyno operator
  
  // Before Modification (Baseline)
  baselinePower         Float?   // HP before mod
  baselineTorque        Float?   // Torque before mod
  baselineRPM           Int?     // RPM of peak power
  
  // After Modification (Results)
  resultPower           Float    // HP after mod
  resultTorque          Float    // Torque after mod
  resultRPM             Int?     // RPM of peak power
  
  // Calculated Gains
  powerGain             Float    // Actual power gain
  torqueGain            Float    // Actual torque gain
  percentGain           Float?   // Percentage increase
  
  // Environmental Conditions
  temperature           Float?   // Ambient temp
  humidity              Float?   // Humidity percentage
  barometricPressure    Float?   // Atmospheric pressure
  correctionFactor      String?  // SAE, STD, etc.
  
  // Modification Details
  modificationCost      Float?   // What user paid
  installationTime      Float?   // Hours to install
  installationNotes     String?  // Any special notes
  
  // User Feedback
  satisfactionRating    Int?     // 1-10 user satisfaction
  wouldRecommend        Boolean? // Would recommend this mod
  notes                 String?  // User notes about the mod
  
  // Learning System Integration
  usedForLearning       Boolean  @default(false) // Has this been integrated into learning?
  confidenceScore       Float?   // How confident are we in this data?
  
  // Verification
  isVerified            Boolean  @default(false) // Has this been verified?
  verifiedBy            String?  // Who verified this result
  verificationDate      DateTime?
  
  // Relationships
  car                   Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  modification          Modification? @relation(fields: [modificationId], references: [id])
  modDatabase           ModificationDatabase? @relation(fields: [modDatabaseId], references: [id])
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([carId])
  @@index([modDatabaseId])
  @@index([powerGain])
  @@index([isVerified])
  @@index([usedForLearning])
}